// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscription  UserSubscription?
  usage         Usage[]
  documents     Document[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSubscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @unique @db.ObjectId
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  plan                 String
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Usage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  month     String   // YYYY-MM format
  proposals Int      @default(0)
  pitchDecks Int     @default(0)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, month])
}

model Document {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  type          String   // "proposal" or "pitch-deck"
  clientName    String?
  clientCompany String?
  projectTitle  String?
  content       String
  metadata      String?  // JSON string for AI generation metadata
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
